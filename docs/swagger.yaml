definitions:
  main.AuthResponse:
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        type: string
      user_id:
        example: a1b2c3d4-e5f6-7g8h-9i0j-k1l2m3n4o5p6
        type: string
    type: object
  main.CreateResponse:
    properties:
      id:
        example: 9b165097-1c9f-4ea3-bef0-e505baa4ff63
        type: string
    type: object
  main.ErrorResponse:
    properties:
      message:
        example: Описание ошибки
        type: string
    type: object
  main.Genre:
    properties:
      description:
        example: Жанр игрового кинематографа, повествующий о той или иной эпохе, людях
          и событиях прошлых лет
        type: string
      id:
        example: ad2805ab-bf4c-4f93-ac68-2e0a854022f8
        type: string
      name:
        example: Исторический
        type: string
    type: object
  main.GenreData:
    properties:
      description:
        example: Жанр игрового кинематографа, повествующий о той или иной эпохе, людях
          и событиях прошлых лет
        type: string
      name:
        example: Исторический
        type: string
    type: object
  main.Hall:
    properties:
      description:
        example: Комфортабельный зал с современным оборудованием
        type: string
      id:
        example: 9b165097-1c9f-4ea3-bef0-e505baa4ff63
        type: string
      name:
        example: Зал 1
        type: string
      screen_type_id:
        example: de01f085-dffa-4347-88da-168560207511
        type: string
    type: object
  main.HallData:
    properties:
      description:
        example: Комфортабельный зал с современным оборудованием
        type: string
      name:
        example: Зал 1
        type: string
      screen_type_id:
        example: de01f085-dffa-4347-88da-168560207511
        type: string
    type: object
  main.LanguageEnumType:
    enum:
    - English
    - Spanish
    - French
    - German
    - Italian
    - Русский
    type: string
    x-enum-varnames:
    - English
    - Spanish
    - French
    - German
    - Italian
    - Russian
  main.Movie:
    properties:
      age_limit:
        example: 12
        type: integer
      box_office_revenue:
        example: 300000000
        type: number
      description:
        example: Эпическая история о кольце власти.
        type: string
      duration:
        example: "02:58:00"
        type: string
      genres:
        items:
          $ref: '#/definitions/main.Genre'
        type: array
      id:
        example: 9b165097-1c9f-4ea3-bef0-e505baa4ff63
        type: string
      rating:
        example: 8.8
        type: number
      release_date:
        example: "2001-12-19"
        type: string
      title:
        example: Властелин колец
        type: string
    type: object
  main.MovieData:
    properties:
      age_limit:
        example: 12
        type: integer
      description:
        example: Эпическая история о кольце власти.
        type: string
      duration:
        example: "02:58:00"
        type: string
      genre_ids:
        example:
        - '["f297eeaf-e784-43bf-a068-eef84f75baa4"'
        - ' "c5c8e037-a073-4105-9941-21e1cb4e79dd"]'
        items:
          type: string
        type: array
      release_date:
        example: "2001-12-19"
        type: string
      title:
        example: Властелин колец
        type: string
    type: object
  main.MovieShow:
    properties:
      hall_id:
        example: de01f085-dffa-4347-88da-168560207511
        type: string
      id:
        example: 9b165097-1c9f-4ea3-bef0-e505baa4ff63
        type: string
      language:
        allOf:
        - $ref: '#/definitions/main.LanguageEnumType'
        example: Русский
      movie_id:
        example: 1a2b3c4d-5e6f-7g8h-9i0j-k1l2m3n4o5p6
        type: string
      start_time:
        example: "2023-10-01T14:30:00Z"
        type: string
    type: object
  main.MovieShowAdmin:
    properties:
      base_price:
        example: 300
        type: number
      hall_id:
        example: de01f085-dffa-4347-88da-168560207511
        type: string
      language:
        allOf:
        - $ref: '#/definitions/main.LanguageEnumType'
        example: Русский
      movie_id:
        example: 1a2b3c4d-5e6f-7g8h-9i0j-k1l2m3n4o5p6
        type: string
      start_time:
        example: "2023-10-01T14:30:00Z"
        type: string
    type: object
  main.MovieShowData:
    properties:
      hall_id:
        example: de01f085-dffa-4347-88da-168560207511
        type: string
      language:
        allOf:
        - $ref: '#/definitions/main.LanguageEnumType'
        example: Русский
      movie_id:
        example: 1a2b3c4d-5e6f-7g8h-9i0j-k1l2m3n4o5p6
        type: string
      start_time:
        example: "2023-10-01T14:30:00Z"
        type: string
    type: object
  main.Review:
    properties:
      id:
        example: a1b2c3d4-e5f6-7g8h-9i0j-k1l2m3n4o5p6
        type: string
      movie_id:
        example: 2002d9d0-80fa-4bc3-ab85-8525d1e9674c
        type: string
      rating:
        example: 8
        type: integer
      review_comment:
        example: Отличный фильм!
        type: string
      user_id:
        example: a1b2c3d4-e5f6-7g8h-9i0j-k1l2m3n4o5p6
        type: string
    type: object
  main.ReviewData:
    properties:
      movie_id:
        example: 2002d9d0-80fa-4bc3-ab85-8525d1e9674c
        type: string
      rating:
        example: 8
        type: integer
      review_comment:
        example: Отличный фильм!
        type: string
      user_id:
        example: a1b2c3d4-e5f6-7g8h-9i0j-k1l2m3n4o5p6
        type: string
    type: object
  main.ScreenType:
    properties:
      description:
        example: Экран с технологией IMAX для максимального погружения
        type: string
      id:
        example: de01f085-dffa-4347-88da-168560207511
        type: string
      name:
        example: IMAX
        type: string
    type: object
  main.ScreenTypeAdmin:
    properties:
      description:
        example: Экран с технологией IMAX для максимального погружения
        type: string
      name:
        example: IMAX
        type: string
      price_modifier:
        example: 1
        type: number
    type: object
  main.Seat:
    properties:
      hall_id:
        example: de01f085-dffa-4347-88da-168560207511
        type: string
      id:
        example: a1b2c3d4-e5f6-7g8h-9i0j-k1l2m3n4o5p6
        type: string
      row_number:
        example: 5
        type: integer
      seat_number:
        example: 12
        type: integer
      seat_type_id:
        example: premium
        type: string
    type: object
  main.SeatData:
    properties:
      hall_id:
        example: de01f085-dffa-4347-88da-168560207511
        type: string
      row_number:
        example: 5
        type: integer
      seat_number:
        example: 12
        type: integer
      seat_type_id:
        example: a1b2c3d4-e5f6-7g8h-9i0j-k1l2m3n4o5p6
        type: string
    type: object
  main.SeatType:
    properties:
      description:
        example: Комфортабельные места с дополнительным пространством и удобствами
        type: string
      id:
        example: de01f085-dffa-4347-88da-168560207511
        type: string
      name:
        example: Премиум
        type: string
    type: object
  main.SeatTypeAdmin:
    properties:
      description:
        example: Комфортабельные места с дополнительным пространством и удобствами
        type: string
      name:
        example: Премиум
        type: string
      price_modifier:
        example: 1
        type: number
    type: object
  main.Ticket:
    properties:
      id:
        example: a1b2c3d4-e5f6-7g8h-9i0j-k1l2m3n4o5p6
        type: string
      movie_show_id:
        example: 9b165097-1c9f-4ea3-bef0-e505baa4ff63
        type: string
      price:
        example: 800
        type: number
      seat_id:
        example: c1bf35fb-4e5f-46cb-914b-bc8d76aaca23
        type: string
      ticket_status:
        allOf:
        - $ref: '#/definitions/main.TicketStatusEnumType'
        example: Purchased
      user_id:
        example: a1b2c3d4-e5f6-7g8h-9i0j-k1l2m3n4o5p6
        type: string
    type: object
  main.TicketData:
    properties:
      movie_show_id:
        example: 9b165097-1c9f-4ea3-bef0-e505baa4ff63
        type: string
      price:
        example: 800
        type: number
      seat_id:
        example: c1bf35fb-4e5f-46cb-914b-bc8d76aaca23
        type: string
      ticket_status:
        allOf:
        - $ref: '#/definitions/main.TicketStatusEnumType'
        example: Available
      user_id:
        example: a1b2c3d4-e5f6-7g8h-9i0j-k1l2m3n4o5p6
        type: string
    type: object
  main.TicketStatusData:
    properties:
      reserve:
        example: true
        type: boolean
      user_id:
        example: a1b2c3d4-e5f6-7g8h-9i0j-k1l2m3n4o5p6
        type: string
    type: object
  main.TicketStatusEnumType:
    enum:
    - Purchased
    - Reserved
    - Available
    type: string
    x-enum-varnames:
    - Purchased
    - Reserved
    - Available
  main.User:
    properties:
      birth_date:
        example: "1990-01-01"
        type: string
      email:
        example: ivan@example.com
        type: string
      id:
        example: a1b2c3d4-e5f6-7g8h-9i0j-k1l2m3n4o5p6
        type: string
      is_admin:
        example: true
        type: boolean
      name:
        example: Иван Иванов
        type: string
      password_hash:
        example: "93652657623450"
        type: string
    type: object
  main.UserAdmin:
    properties:
      is_admin:
        example: true
        type: boolean
    type: object
  main.UserData:
    properties:
      birth_date:
        example: "1990-01-01"
        type: string
      email:
        example: ivan@example.com
        type: string
      name:
        example: Иван Иванов
        type: string
      password_hash:
        example: "93652657623450"
        type: string
    type: object
  main.UserLogin:
    properties:
      email:
        example: admin@admin.com
        type: string
      password_hash:
        example: $2a$10$xS.xH8z3bJ1J5hNtGvXZfez7v6JQY9W7kZf3JvYbW6cXrV1nYd2E3C
        type: string
    type: object
  main.UserRegister:
    properties:
      birth_date:
        example: "1990-01-01"
        type: string
      email:
        example: ivan@example.com
        type: string
      name:
        example: Иван Иванов
        type: string
      password_hash:
        example: hashed_password
        type: string
    type: object
info:
  contact: {}
  description: Разработка базы данных для управления кинотеатром
  title: Курсовая работа по базам данных
  version: "1.0"
paths:
  /genres:
    get:
      description: Возвращает список всех жанров, хранящихся в базе данных.
      produces:
      - application/json
      responses:
        "200":
          description: Список жанров
          schema:
            items:
              $ref: '#/definitions/main.Genre'
            type: array
        "404":
          description: Жанры не найдены
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      summary: Получить все жанры (guest | user | admin)
      tags:
      - Жанры фильмов
    post:
      consumes:
      - application/json
      description: Создаёт новый жанр.
      parameters:
      - description: Данные жанра
        in: body
        name: genre
        required: true
        schema:
          $ref: '#/definitions/main.GenreData'
      produces:
      - application/json
      responses:
        "201":
          description: ID созданного жанра
          schema:
            $ref: '#/definitions/main.CreateResponse'
        "400":
          description: В запросе предоставлены неверные данные
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "403":
          description: Доступ запрещён
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Создать жанр (admin)
      tags:
      - Жанры фильмов
  /genres/{id}:
    delete:
      description: Удаляет жанр по ID.
      parameters:
      - description: ID жанра
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: Данные о жанре успешно удалены
        "400":
          description: Неверный формат ID
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "403":
          description: Доступ запрещён
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Жанр не найден
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "409":
          description: Конфликт при удалении жанра
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Удалить жанр (admin)
      tags:
      - Жанры фильмов
    get:
      description: Возвращает жанр по ID.
      parameters:
      - description: ID жанра
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Жанр
          schema:
            $ref: '#/definitions/main.Genre'
        "400":
          description: Неверный формат ID
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Жанр не найден
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      summary: Получить жанр по ID (guest | user | admin)
      tags:
      - Жанры фильмов
    put:
      consumes:
      - application/json
      description: Обновляет существующий жанр.
      parameters:
      - description: ID жанра
        in: path
        name: id
        required: true
        type: string
      - description: Новые данные жанра
        in: body
        name: genre
        required: true
        schema:
          $ref: '#/definitions/main.GenreData'
      produces:
      - application/json
      responses:
        "200":
          description: Данные о жанре успешно обновлены
        "400":
          description: В запросе предоставлены неверные данные
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "403":
          description: Доступ запрещён
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Жанр не найден
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Обновить жанр (admin)
      tags:
      - Жанры фильмов
  /genres/search:
    get:
      description: Возвращает список жанров, имена которых содержат указанную строку
        (регистронезависимый поиск).
      parameters:
      - description: Строка для поиска
        in: query
        name: query
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Список найденных жанров
          schema:
            items:
              $ref: '#/definitions/main.Genre'
            type: array
        "400":
          description: Строка поиска пуста
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Жанры не найдены
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      summary: Поиск жанров по имени (guest | user | admin)
      tags:
      - Жанры фильмов
  /halls:
    get:
      description: Возвращает список всех кинозалов, содержащихся в базе данных.
      produces:
      - application/json
      responses:
        "200":
          description: Список кинозалов
          schema:
            items:
              $ref: '#/definitions/main.Hall'
            type: array
        "404":
          description: Данные не найдены
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      summary: Получить все кинозалы (guest | user | admin)
      tags:
      - Кинозалы
    post:
      consumes:
      - application/json
      description: Создаёт новый кинозал.
      parameters:
      - description: Данные кинозала
        in: body
        name: hall
        required: true
        schema:
          $ref: '#/definitions/main.HallData'
      produces:
      - application/json
      responses:
        "201":
          description: ID созданного кинозала
          schema:
            $ref: '#/definitions/main.CreateResponse'
        "400":
          description: В запросе предоставлены неверные данные
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "403":
          description: Доступ запрещён
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "409":
          description: Конфликт при создании кинозала
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Создать кинозал (admin)
      tags:
      - Кинозалы
  /halls/{hall_id}/seats:
    get:
      description: Возвращает список мест в указанном зале.
      parameters:
      - description: ID зала
        in: path
        name: hall_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Список мест
          schema:
            items:
              $ref: '#/definitions/main.Seat'
            type: array
        "400":
          description: Неверный формат ID зала
          schema:
            type: string
        "404":
          description: Места не найдены
          schema:
            type: string
        "500":
          description: Ошибка сервера
          schema:
            type: string
      summary: Получить места по ID зала (guest | user | admin)
      tags:
      - Места
  /halls/{id}:
    delete:
      description: Удаляет кинозал по ID.
      parameters:
      - description: ID кинозала
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: Данные о кинозале успешно удалены
        "400":
          description: Неверный формат ID
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "403":
          description: Доступ запрещён
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Данные не найдены
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "409":
          description: Конфликт при удалении кинозала
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Удалить кинозал (admin)
      tags:
      - Кинозалы
    get:
      description: Возвращает кинозал по ID.
      parameters:
      - description: ID зала
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Данные кинозала
          schema:
            $ref: '#/definitions/main.Hall'
        "400":
          description: Неверный формат ID
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Данные не найдены
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      summary: Получить кинозал по ID (guest | user | admin)
      tags:
      - Кинозалы
    put:
      consumes:
      - application/json
      description: Обновляет существующий кинозал.
      parameters:
      - description: ID зала
        in: path
        name: id
        required: true
        type: string
      - description: Обновлённые данные зала
        in: body
        name: hall
        required: true
        schema:
          $ref: '#/definitions/main.HallData'
      produces:
      - application/json
      responses:
        "200":
          description: Данные о кинозале успешно обновлены
        "400":
          description: В запросе предоставлены неверные данные
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "403":
          description: Доступ запрещён
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Зал не найден
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "409":
          description: Конфликт при обновлении кинозала
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Обновить кинозал (admin)
      tags:
      - Кинозалы
  /halls/by-screen-type:
    get:
      description: Возвращает список залов с указанным типом экрана.
      parameters:
      - description: ID типа экрана
        in: query
        name: screen_type_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Список найденных кинозалов
          schema:
            items:
              $ref: '#/definitions/main.Hall'
            type: array
        "400":
          description: Неверный формат ID типа экрана
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Залы не найдены
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      summary: Получить залы по типу экрана (guest | user | admin)
      tags:
      - Кинозалы
  /halls/search:
    get:
      description: Возвращает список залов, названия которых содержат указанную строку.
      parameters:
      - description: Строка для поиска
        in: query
        name: query
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Список найденных кинозалов
          schema:
            items:
              $ref: '#/definitions/main.Hall'
            type: array
        "400":
          description: Строка поиска пуста
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Залы не найдены
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      summary: Поиск залов по названию (guest | user | admin)
      tags:
      - Кинозалы
  /movie-shows:
    get:
      description: Возвращает список всех киносеансов, хранящихся в базе данных.
      produces:
      - application/json
      responses:
        "200":
          description: Список киносеансов
          schema:
            items:
              $ref: '#/definitions/main.MovieShow'
            type: array
        "404":
          description: Киносеансы не найдены
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      summary: Получить все киносеансы (guest | user | admin)
      tags:
      - Киносеансы
    post:
      consumes:
      - application/json
      description: Создаёт новый киносеанс (а также билеты на него)
      parameters:
      - description: Данные киносеанса
        in: body
        name: movie_show
        required: true
        schema:
          $ref: '#/definitions/main.MovieShowAdmin'
      produces:
      - application/json
      responses:
        "201":
          description: ID созданного киносеанса
          schema:
            $ref: '#/definitions/main.CreateResponse'
        "400":
          description: Неверные данные
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Создать киносеанс (admin)
      tags:
      - Киносеансы
  /movie-shows/{id}:
    delete:
      description: Удаляет данные о киносеансе.
      parameters:
      - description: ID киносеанса
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: Данные о киносеансе удалёны
        "400":
          description: Неверный формат ID
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "403":
          description: Доступ запрещён
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Киносеанс не найден
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "409":
          description: Конфликт при удалении киносеанса
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Удалить киносеанс фильма (admin)
      tags:
      - Киносеансы
    get:
      description: Возвращает даныне о киносеансе по ID.
      parameters:
      - description: ID киносеанса фильма
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Данные киносеанса
          schema:
            $ref: '#/definitions/main.MovieShow'
        "400":
          description: Неверный формат ID
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Киносеанс не найден
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      summary: Получить киносеанс по ID (guest | user | admin)
      tags:
      - Киносеансы
    put:
      consumes:
      - application/json
      description: Обновляет данные о киносеансе.
      parameters:
      - description: ID киносеанса
        in: path
        name: id
        required: true
        type: string
      - description: Новые данные киносеанса
        in: body
        name: movie_show
        required: true
        schema:
          $ref: '#/definitions/main.MovieShowData'
      produces:
      - application/json
      responses:
        "200":
          description: Данные киносеанса обновлены
        "400":
          description: Неверные данные
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "403":
          description: Доступ запрещён
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Киносеанс не найден
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "409":
          description: Конфликт при обновлении киносеанса
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Обновить киносеанс (admin)
      tags:
      - Киносеансы
  /movie-shows/by-date/{date}:
    get:
      description: Возвращает сеансы, начинающиеся в указанный день.
      parameters:
      - description: Дата (YYYY-MM-DD)
        in: path
        name: date
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Данные о киносеансах
          schema:
            items:
              $ref: '#/definitions/main.MovieShow'
            type: array
        "400":
          description: Неверный формат даты
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Киносеансы в указанную дату не найдены
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      summary: Получить сеансы на указанную дату (guest | user | admin)
      tags:
      - Киносеансы
  /movie-shows/upcoming:
    get:
      description: Возвращает сеансы, начинающиеся в ближайшие N часов.
      parameters:
      - description: Период в часах (по умолчанию 24)
        in: query
        name: hours
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Данные о киносеансах
          schema:
            items:
              $ref: '#/definitions/main.MovieShow'
            type: array
        "400":
          description: Неверный формат даты
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Киносеансы в указанную дату не найдены
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      summary: Получить ближайшие сеансы (guest | user | admin)
      tags:
      - Киносеансы
  /movies:
    get:
      description: Возвращает список всех фильмов, содержащихся в базе данных.
      produces:
      - application/json
      responses:
        "200":
          description: Список фильмов
          schema:
            items:
              $ref: '#/definitions/main.Movie'
            type: array
        "404":
          description: Фильмы не найдены
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      summary: Получить все фильмы (guest | user | admin)
      tags:
      - Фильмы
    post:
      consumes:
      - application/json
      description: Создаёт новый фильм.
      parameters:
      - description: Данные фильма
        in: body
        name: movie
        required: true
        schema:
          $ref: '#/definitions/main.MovieData'
      produces:
      - application/json
      responses:
        "201":
          description: ID созданного фильма
          schema:
            $ref: '#/definitions/main.CreateResponse'
        "400":
          description: В запросе предоставлены неверные данные
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "403":
          description: Доступ запрещён
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Создать фильм (admin)
      tags:
      - Фильмы
  /movies/{id}:
    delete:
      description: Удаляет фильм по ID.
      parameters:
      - description: ID фильма
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: Данные о фильме успешно удалены
        "400":
          description: Неверный формат ID
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "403":
          description: Доступ запрещён
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Фильм не найден
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "409":
          description: Конфликт при удалении фильма
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Удалить фильм (admin)
      tags:
      - Фильмы
    get:
      description: Возвращает фильм по ID.
      parameters:
      - description: ID фильма
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Фильм
          schema:
            $ref: '#/definitions/main.Movie'
        "400":
          description: Неверный формат ID
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Фильм не найден
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      summary: Получить фильм по ID (guest | user | admin)
      tags:
      - Фильмы
    put:
      consumes:
      - application/json
      description: Обновляет существующий фильм.
      parameters:
      - description: ID фильма
        in: path
        name: id
        required: true
        type: string
      - description: Новые данные фильма
        in: body
        name: movie
        required: true
        schema:
          $ref: '#/definitions/main.MovieData'
      produces:
      - application/json
      responses:
        "200":
          description: Данные о фильме успешно обновлены
        "400":
          description: В запросе предоставлены неверные данные
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "403":
          description: Доступ запрещён
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Фильм не найден
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Обновить фильм (admin)
      tags:
      - Фильмы
  /movies/{movie_id}/reviews:
    get:
      description: Возвращает все отзывы для указанного фильма.
      parameters:
      - description: ID фильма
        in: path
        name: movie_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Список отзывов
          schema:
            items:
              $ref: '#/definitions/main.Review'
            type: array
        "400":
          description: Неверный формат ID фильма
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Отзывы не найдены
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      summary: Получить отзывы по ID фильма (guest | user | admin)
      tags:
      - Отзывы
  /movies/{movie_id}/shows:
    get:
      description: Возвращает киносеансы для указанного фильма в ближайшие N часов.
      parameters:
      - description: ID фильма
        in: path
        name: movie_id
        required: true
        type: string
      - description: Период в часах (по умолчанию 24)
        in: query
        name: hours
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Данные о найденных киносеансах
          schema:
            items:
              $ref: '#/definitions/main.MovieShow'
            type: array
        "400":
          description: Неверный формат ID фильма или параметра hours
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Киносеансы для данного фильма не найдены
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      summary: Получить киносеансы по ID фильма (guest | user | admin)
      tags:
      - Киносеансы
  /movies/by-genres/search:
    get:
      description: Возвращает фильмы, относящиеся ко всем указанным жанрам.
      parameters:
      - collectionFormat: multi
        description: Список ID жанров
        in: query
        items:
          type: string
        name: genre_ids
        required: true
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: Найденные фильмы
          schema:
            items:
              $ref: '#/definitions/main.Movie'
            type: array
        "400":
          description: В запросе предоставлены неверные данные
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Жанры не найдены
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      summary: Получить фильмы по списку жанров (guest | user | admin)
      tags:
      - Фильмы
  /movies/by-title/search:
    get:
      description: Возвращает фильмы, в названии которых содержится заданная строка.
      parameters:
      - description: Поисковый запрос
        in: query
        name: query
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Найденные фильмы
          schema:
            items:
              $ref: '#/definitions/main.Movie'
            type: array
        "400":
          description: Строка поиска пуста
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Данные не найдены
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      summary: Поиск фильмов по названию (guest | user | admin)
      tags:
      - Фильмы
  /reviews:
    get:
      description: Возвращает список всех отзывов, хранящихся в базе данных.
      produces:
      - application/json
      responses:
        "200":
          description: Список отзывов
          schema:
            items:
              $ref: '#/definitions/main.Review'
            type: array
        "404":
          description: Отзывы не найдены
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Получить все отзывы (admin)
      tags:
      - Отзывы
    post:
      consumes:
      - application/json
      description: Создаёт новый отзыв.
      parameters:
      - description: Данные отзыва
        in: body
        name: review
        required: true
        schema:
          $ref: '#/definitions/main.ReviewData'
      produces:
      - application/json
      responses:
        "201":
          description: ID созданного отзыва
          schema:
            $ref: '#/definitions/main.CreateResponse'
        "400":
          description: В запросе предоставлены неверные данные
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "403":
          description: Доступ запрещён
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Создать отзыв (user* | admin)
      tags:
      - Отзывы
  /reviews/{id}:
    delete:
      description: Удаляет отзыв по ID.
      parameters:
      - description: ID отзыва
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: Данные отзыва успешно удалены
        "400":
          description: Неверный формат ID
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "403":
          description: Доступ запрещён
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Отзыв не найден
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Удалить отзыв (user* | admin)
      tags:
      - Отзывы
    get:
      description: Возвращает отзыв по ID.
      parameters:
      - description: ID отзыва
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Отзыв
          schema:
            $ref: '#/definitions/main.Review'
        "400":
          description: Неверный формат ID
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Отзыв не найден
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      summary: Получить отзыв по ID (guset | user | admin)
      tags:
      - Отзывы
    put:
      consumes:
      - application/json
      description: Обновляет существующий отзыв.
      parameters:
      - description: ID отзыва
        in: path
        name: id
        required: true
        type: string
      - description: Новые данные отзыва
        in: body
        name: review
        required: true
        schema:
          $ref: '#/definitions/main.ReviewData'
      produces:
      - application/json
      responses:
        "200":
          description: Данные отзыва успешно обновлены
        "400":
          description: В запросе предоставлены неверные данные
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "403":
          description: Доступ запрещён
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Отзыв не найден
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Обновить отзыв (user* | admin)
      tags:
      - Отзывы
  /screen-types:
    get:
      description: Возвращает список всех типов экранов, содержащихся в базе данных.
      produces:
      - application/json
      responses:
        "200":
          description: Список типов экранов
          schema:
            items:
              $ref: '#/definitions/main.ScreenType'
            type: array
        "404":
          description: Типы экранов не найдены
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      summary: Получить все типы экранов (guest | user | admin)
      tags:
      - Типы экранов
    post:
      consumes:
      - application/json
      description: Создаёт новый тип экрана.
      parameters:
      - description: Данные типа экрана
        in: body
        name: screen_type
        required: true
        schema:
          $ref: '#/definitions/main.ScreenTypeAdmin'
      produces:
      - application/json
      responses:
        "201":
          description: ID созданного типа экрана
          schema:
            $ref: '#/definitions/main.CreateResponse'
        "400":
          description: В запросе предоставлены неверные данные
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "403":
          description: Доступ запрещён
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Создать тип экрана (admin)
      tags:
      - Типы экранов
  /screen-types/{id}:
    delete:
      description: Удаляет тип экрана по ID.
      parameters:
      - description: ID типа экрана
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: Данные о типе экрана успешно удалены
        "400":
          description: Неверный формат ID
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "403":
          description: Доступ запрещён
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Тип экрана не найден
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Удалить тип экрана (admin)
      tags:
      - Типы экранов
    get:
      description: Возвращает тип экрана по ID.
      parameters:
      - description: ID типа экрана
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Тип экрана
          schema:
            $ref: '#/definitions/main.ScreenType'
        "400":
          description: Неверный формат ID
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Тип экрана не найден
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      summary: Получить тип экрана по ID (guest | user | admin)
      tags:
      - Типы экранов
    put:
      consumes:
      - application/json
      description: Обновляет существующий тип экрана.
      parameters:
      - description: ID типа экрана
        in: path
        name: id
        required: true
        type: string
      - description: Обновлённые данные типа экрана
        in: body
        name: screen_type
        required: true
        schema:
          $ref: '#/definitions/main.ScreenTypeAdmin'
      produces:
      - application/json
      responses:
        "200":
          description: Данные о типе экрана успешно обновлены
        "400":
          description: В запросе предоставлены неверные данные
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "403":
          description: Доступ запрещён
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Тип экранов не найден
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Обновить тип экрана (admin)
      tags:
      - Типы экранов
  /screen-types/search:
    get:
      description: Возвращает типы экранов, название которых содержит указанную строку.
      parameters:
      - description: Поисковый запрос
        in: query
        name: query
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Список типов экранов
          schema:
            items:
              $ref: '#/definitions/main.ScreenType'
            type: array
        "400":
          description: Строка поиска пуста
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Типы экранов не найдены
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      summary: Поиск типов экранов по названию (guest | user | admin)
      tags:
      - Типы экранов
  /seat-types:
    get:
      description: Возвращает список всех типов мест, содержащихся в базе данных.
      produces:
      - application/json
      responses:
        "200":
          description: Список типов мест
          schema:
            items:
              $ref: '#/definitions/main.SeatType'
            type: array
        "404":
          description: Типы мест не найдены
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      summary: Получить все типы мест (guest | user | admin)
      tags:
      - Типы мест
    post:
      consumes:
      - application/json
      description: Создаёт новый тип места.
      parameters:
      - description: Данные типа места
        in: body
        name: seat_type
        required: true
        schema:
          $ref: '#/definitions/main.SeatTypeAdmin'
      produces:
      - application/json
      responses:
        "201":
          description: ID созданного типа места
          schema:
            $ref: '#/definitions/main.CreateResponse'
        "400":
          description: В запросе предоставлены неверные данные
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "403":
          description: Доступ запрещён
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Создать тип места (admin)
      tags:
      - Типы мест
  /seat-types/{id}:
    delete:
      description: Удаляет тип места по ID.
      parameters:
      - description: ID типа места
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: Данные о типе места успешно удалены
        "400":
          description: Неверный формат ID
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "403":
          description: Доступ запрещён
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Тип места не найден
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Удалить тип места (admin)
      tags:
      - Типы мест
    get:
      description: Возвращает тип места по ID.
      parameters:
      - description: ID типа места
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Тип места
          schema:
            $ref: '#/definitions/main.SeatType'
        "400":
          description: Неверный формат ID
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Тип места не найден
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      summary: Получить тип места по ID (guest | user | admin)
      tags:
      - Типы мест
    put:
      consumes:
      - application/json
      description: Обновляет существующий тип места.
      parameters:
      - description: ID типа места
        in: path
        name: id
        required: true
        type: string
      - description: Обновлённые данные типа места
        in: body
        name: seat_type
        required: true
        schema:
          $ref: '#/definitions/main.SeatTypeAdmin'
      produces:
      - application/json
      responses:
        "200":
          description: Данные о типе места успешно обновлены
        "400":
          description: В запросе предоставлены неверные данные
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "403":
          description: Доступ запрещён
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Тип места не найден
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Обновить тип места (admin)
      tags:
      - Типы мест
  /seat-types/search:
    get:
      description: Возвращает типы места, название которых содержит указанную строку.
      parameters:
      - description: Поисковый запрос
        in: query
        name: query
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Список типов мест
          schema:
            items:
              $ref: '#/definitions/main.SeatType'
            type: array
        "400":
          description: Строка поиска пуста
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Типы мест не найдены
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      summary: Поиск типов места по названию (guest | user | admin)
      tags:
      - Типы мест
  /seats:
    get:
      description: Возвращает список всех мест, содержащихся в базе данных.
      produces:
      - application/json
      responses:
        "200":
          description: Список мест
          schema:
            items:
              $ref: '#/definitions/main.Seat'
            type: array
        "403":
          description: Доступ запрещён
          schema:
            type: string
        "404":
          description: Места не найдены
          schema:
            type: string
        "500":
          description: Ошибка сервера
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Получить все места (admin)
      tags:
      - Места
    post:
      consumes:
      - application/json
      description: Создаёт новое место.
      parameters:
      - description: Данные места
        in: body
        name: seat
        required: true
        schema:
          $ref: '#/definitions/main.SeatData'
      produces:
      - application/json
      responses:
        "201":
          description: ID созданного места
          schema:
            $ref: '#/definitions/main.CreateResponse'
        "400":
          description: В запросе предоставлены неверные данные
          schema:
            type: string
        "403":
          description: Доступ запрещён
          schema:
            type: string
        "500":
          description: Ошибка сервера
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Создать место (admin)
      tags:
      - Места
  /seats/{id}:
    delete:
      description: Удаляет место по ID.
      parameters:
      - description: ID места
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: Данные о месте успешно удалены
        "400":
          description: Неверный формат ID
          schema:
            type: string
        "403":
          description: Доступ запрещён
          schema:
            type: string
        "404":
          description: Место не найдено
          schema:
            type: string
        "500":
          description: Ошибка сервера
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Удалить место (admin)
      tags:
      - Места
    get:
      description: Возвращает место по ID.
      parameters:
      - description: ID места
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Место
          schema:
            $ref: '#/definitions/main.Seat'
        "400":
          description: Неверный формат ID
          schema:
            type: string
        "404":
          description: Место не найдено
          schema:
            type: string
        "500":
          description: Ошибка сервера
          schema:
            type: string
      summary: Получить место по ID (guest | user | admin)
      tags:
      - Места
    put:
      consumes:
      - application/json
      description: Обновляет существующее место.
      parameters:
      - description: ID места
        in: path
        name: id
        required: true
        type: string
      - description: Обновлённые данные места
        in: body
        name: seat
        required: true
        schema:
          $ref: '#/definitions/main.SeatData'
      produces:
      - application/json
      responses:
        "200":
          description: Данные о месте успешно обновлены
        "400":
          description: В запросе предоставлены неверные данные
          schema:
            type: string
        "403":
          description: Доступ запрещён
          schema:
            type: string
        "404":
          description: Место не найдено
          schema:
            type: string
        "500":
          description: Ошибка сервера
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Обновить место (admin)
      tags:
      - Места
  /tickets:
    post:
      consumes:
      - application/json
      description: Создаёт новый билет.
      parameters:
      - description: Билет
        in: body
        name: ticket
        required: true
        schema:
          $ref: '#/definitions/main.TicketData'
      produces:
      - application/json
      responses:
        "201":
          description: ID созданного билета
          schema:
            $ref: '#/definitions/main.CreateResponse'
        "400":
          description: В запросе предоставлены неверные данные
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "403":
          description: Доступ запрещён
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Создать билет (admin)
      tags:
      - Билеты
  /tickets/{id}:
    delete:
      description: Удаляет билет по ID.
      parameters:
      - description: ID билета
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: Данные о билете успешно удалены
        "400":
          description: Неверный формат ID
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "403":
          description: Доступ запрещён
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Билет не найден
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Удалить билет (admin)
      tags:
      - Билеты
    put:
      consumes:
      - application/json
      description: Обновляет существующий билет.
      parameters:
      - description: ID билета
        in: path
        name: id
        required: true
        type: string
      - description: Обновлённые данные билета
        in: body
        name: ticket
        required: true
        schema:
          $ref: '#/definitions/main.TicketData'
      produces:
      - application/json
      responses:
        "200":
          description: Данные о билете успешно обновлены
        "400":
          description: Неверный формат JSON
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "403":
          description: Доступ запрещён
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Билет не найден
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Ошибка
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Обновить билет (admin)
      tags:
      - Билеты
  /tickets/available-movie-show/{movie_show_id}:
    get:
      description: Возвращает список свободные билетов по ID сеанса, содержащихся
        в базе данных.
      parameters:
      - description: ID показа фильма
        in: path
        name: movie_show_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/main.Ticket'
            type: array
        "400":
          description: Неверный формат ID
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "403":
          description: Доступ запрещён
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Билеты не найдены
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      summary: Получить свободные билеты для сеанса фильма по ID (guest | user | admin)
      tags:
      - Билеты
  /tickets/movie-show/{movie_show_id}:
    get:
      description: Возвращает список всех билетов по ID сеанаса, содержащихся в базе
        данных.
      parameters:
      - description: ID показа фильма
        in: path
        name: movie_show_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/main.Ticket'
            type: array
        "400":
          description: Неверный формат ID
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "403":
          description: Доступ запрещён
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Билеты не найдены
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Получить все билеты для сеанса фильма по ID (admin)
      tags:
      - Билеты
  /tickets/reserve/{id}:
    put:
      consumes:
      - application/json
      description: Бронирует или возвращает билет по ID.
      parameters:
      - description: ID билета
        in: path
        name: id
        required: true
        type: string
      - description: Данные для бронирования билета
        in: body
        name: ticket
        required: true
        schema:
          $ref: '#/definitions/main.TicketStatusData'
      produces:
      - application/json
      responses:
        "200":
          description: Билет успешно забронирован
        "400":
          description: Неверный формат JSON
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "403":
          description: Доступ запрещён
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Билет не найден
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Ошибка
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Изменить статус бронирования билета билет (user* | admin)
      tags:
      - Билеты
  /tickets/user/{user_id}:
    get:
      parameters:
      - description: ID пользователя
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/main.Ticket'
            type: array
        "400":
          description: Неверный формат ID
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "403":
          description: Доступ запрещён
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Ошибка
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Получить билеты пользователя (user* | admin)
      tags:
      - Билеты
  /user/{id}:
    get:
      consumes:
      - application/json
      description: Возвращает nickname по ID пользователя.
      parameters:
      - description: ID пользователя
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Nickname пользователя
          schema:
            type: string
        "400":
          description: В запросе предоставлены неверные данные
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Пользователь не найден
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      summary: Получить nickname по ID пользователя (guest | user | admin)
      tags:
      - Пользователи
  /user/admin-status/{id}:
    get:
      consumes:
      - application/json
      description: Возвращает статус администратора для пользователя по ID.
      parameters:
      - description: ID пользователя
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Статус администрации для пользователя
          schema:
            $ref: '#/definitions/main.UserAdmin'
        "400":
          description: В запросе предоставлены неверные данные
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "403":
          description: Доступ запрещён
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Пользователь не найден
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Получить статус администратора для пользователя (admin)
      tags:
      - Пользователи
    put:
      consumes:
      - application/json
      description: Изменяет статус администратора для пользователя по ID.
      parameters:
      - description: ID пользователя
        in: path
        name: id
        required: true
        type: string
      - description: Статус администратора
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/main.UserAdmin'
      produces:
      - application/json
      responses:
        "200":
          description: Статус администрации для пользователя успешно обновлён
        "400":
          description: В запросе предоставлены неверные данные
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "403":
          description: Доступ запрещён
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Пользователь не найден
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Изменить статус администратора для пользователя (admin)
      tags:
      - Пользователи
  /user/login:
    post:
      consumes:
      - application/json
      description: Аутентифицирует пользователя и возвращает JWT-токен.
      parameters:
      - description: Данные для входа
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/main.UserLogin'
      produces:
      - application/json
      responses:
        "200":
          description: Данные авторизации
          schema:
            $ref: '#/definitions/main.AuthResponse'
        "400":
          description: В запросе предоставлены неверные данные
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "401":
          description: Неверный email или пароль
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      summary: Вход пользователя (guest | user | admin)
      tags:
      - Пользователи
  /user/register:
    post:
      consumes:
      - application/json
      description: Регистрирует нового пользователя в системе.
      parameters:
      - description: Данные для регистрации
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/main.UserRegister'
      produces:
      - application/json
      responses:
        "201":
          description: Пользователь успешно зарегистрирован в системе
        "400":
          description: В запросе предоставлены неверные данные
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "409":
          description: Пользователь с таким email уже существует
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      summary: Зарегистрировать нового пользователя (guest | user | admin)
      tags:
      - Пользователи
  /users:
    get:
      description: Возвращает список всех пользователей.
      produces:
      - application/json
      responses:
        "200":
          description: Список пользователей
          schema:
            items:
              $ref: '#/definitions/main.User'
            type: array
        "403":
          description: Доступ запрещён
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Пользователи не найдены
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Получить всех пользователей (admin)
      tags:
      - Пользователи
  /users/{id}:
    delete:
      description: Удаляет пользователя по ID.
      parameters:
      - description: ID пользователя
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: Пользователь успешно удалён
        "400":
          description: Неверный формат ID
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "403":
          description: Доступ запрещён
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Пользователь не найден
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Удалить пользователя (admin)
      tags:
      - Пользователи
    get:
      description: Возвращает пользователя по ID.
      parameters:
      - description: ID пользователя
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Пользователь
          schema:
            $ref: '#/definitions/main.User'
        "400":
          description: Неверный формат ID
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Пользователь не найден
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Получить пользователя по ID (user* | admin)
      tags:
      - Пользователи
    put:
      consumes:
      - application/json
      description: Обновляет данные пользователя.
      parameters:
      - description: ID пользователя
        in: path
        name: id
        required: true
        type: string
      - description: Новые данные пользователя
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/main.UserData'
      produces:
      - application/json
      responses:
        "200":
          description: Данные пользователя успешно обновлены
        "400":
          description: В запросе предоставлены неверные данные
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "403":
          description: Доступ запрещён
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Пользователь не найден
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Обновить пользователя (user* | admin)
      tags:
      - Пользователи
  /users/{user_id}/reviews:
    get:
      description: Возвращает все отзывы указанного пользователя.
      parameters:
      - description: ID пользователя
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Список отзывов
          schema:
            items:
              $ref: '#/definitions/main.Review'
            type: array
        "400":
          description: Неверный формат ID пользователя
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Отзывы не найдены
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Получить отзывы пользователя (user* | admin)
      tags:
      - Отзывы
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
